as.character.latex <- function(x) {
str_c("\\",
x[["cmd"]],
if (!is.null(x[["brackets"]])) {
brackets(x[["brackets"]])
} else {
""
},
str_c(map_chr(x[["args"]], braces), collapse=""))
}
cat(as.character(latex("foo", "")))
cat(as.character(latex("foo"))
)
library(stringr)
library(R6)
library(purrr)
parens <- function(x) str_c("(", x, ")")
braces <- function(x) str_c("{", x, "}")
brackets <- function(x) str_c("[", x, "]")
latex <- function(cmd, ..., brackets=NULL, trailing=TRUE) {
args <- as.character(list(...))
if (trailing && len(args) == 0) {
args <- ""
}
x <- list(cmd = cmd, args = args, brackets = brackets)
class(x) <- "latex"
x
}
as.character.latex <- function(x) {
str_c("\\",
x[["cmd"]],
if (!is.null(x[["brackets"]])) {
brackets(x[["brackets"]])
} else {
""
},
str_c(map_chr(x[["args"]], braces), collapse = ""))
}
cat(as.character(latex("foo"))
latex("foo")
library(stringr)
library(R6)
library(purrr)
parens <- function(x) str_c("(", x, ")")
braces <- function(x) str_c("{", x, "}")
brackets <- function(x) str_c("[", x, "]")
latex <- function(cmd, ..., brackets=NULL, trailing=TRUE) {
args <- as.character(list(...))
if (trailing && length(args) == 0) {
args <- ""
}
x <- list(cmd = cmd, args = args, brackets = brackets)
class(x) <- "latex"
x
}
as.character.latex <- function(x) {
str_c("\\",
x[["cmd"]],
if (!is.null(x[["brackets"]])) {
brackets(x[["brackets"]])
} else {
""
},
str_c(map_chr(x[["args"]], braces), collapse = ""))
}
latex("foo")
as.character(latex("foo"))
library(stringr)
library(R6)
library(purrr)
parens <- function(x) str_c("(", x, ")")
braces <- function(x) str_c("{", x, "}")
brackets <- function(x) str_c("[", x, "]")
latex <- function(cmd, ..., brackets=NULL, trailing=TRUE) {
args <- as.character(list(...))
if (trailing && length(args) == 0) {
args <- ""
}
x <- list(cmd = cmd, args = args, brackets = brackets)
class(x) <- "latex"
x
}
as.character.latex <- function(x) {
str_c("\\",
x[["cmd"]],
if (!is.null(x[["brackets"]])) {
brackets(x[["brackets"]])
} else {
""
},
str_c(map_chr(x[["args"]], braces), collapse = ""))
}
print.latex <- function(x) {
charx <- as.character(x)
cat(charx)
invisible(charx)
}
as.character(latex("foo"))
latex(foo)
latex("foo")
?str_c
foo("sffds #1 #2 #3")
str_replace("sffds #1 #2 #3", c("#", 1:2), c("a", "b"))
str_replace("sffds #1 #2 #3", str_c("#", 1:2), c("a", "b"))
?str_replace
if (is.null(optional)) {
args <- c(x[["default"]], args)
} else {
args <- c(optional, args)
}
library(shiny)
?shiny
shiny::a
?shiny::a
tatgs
tags
?tag
tag
tagList
lst
tag
tag.print
htmltools::tag
?htmltools::tag
as.function(latex_command("a", num=2))
source('~/macromaker/R/hello.R')
source('~/macromaker/R/hello.R')
latex("foo")
latex_command("foo", 2)
macro <- function(name) {
function(args, optional=character()) {
str_c("\\", name,
str_c(map_chr(optional, brackets)),
str_c(map_chr(list(args), braces)))
}
}
bf <- macro("bf")
bf("sdfas basgas ")
bf("sdfas basgas")
bf("sdfas basgas", optional=1)
latex_command("foo")
latex_command("foo", "")
as.character.latex_command <- function(x, ...) {
cmd <- "providecommand"
num_str <- if (x[["num"]] > 0) {
num_str <- brackets(x[["num"]])
} else {""}
opt_str <- if (!is.null(x[["default"]])) {
opt_str <- brackets(x[["default"]])
} else {""}
str_c("\\", cmd,
braces(str_c("\\", x[["name"]])),
num_str, opt_str,
brackets(x[["definition"]]))
}
latex_command("foo", "")
as.character(latex_command("foo", ""))
source('~/macromaker/R/hello.R')
as.character(latex_command("foo", ""))
source('~/macromaker/R/hello.R')
as.character(latex_command("foo", ""))
as.character(latex_command("foo", "what is this: #1", num=2))
as.character(latex_command("foo", "what is this: #1 #2", num=2))
as.function(latex_command("foo", "what is this: #1 #2", num=2)))
as.function(latex_command("foo", "what is this: #1 #2", num=2))
as.function(latex_command("foo", "what is this: #1 #2", num=2))("a", "b")
as.function(latex_command("foo", "what is this: #1 #2", num=2))(c("a", "b"))
source('~/macromaker/R/hello.R')
as.function(latex_command("foo", "what is this: #1 #2", num=2))(c("a", "b"))
as.function(latex_command("foo", "what is this: #1 #2", num=2))("a", "b")
?modifyList
?append
append(list(a = 1, b=3), list(c = 3, d = 4))
append
?"[["
?[[
"[["
getMethod("[[")
install.packages("feather")
library(htmltools)
HTML()
library(xtable)
?xtable
?print.xtable
getOption("xtable.sanitize.text.function")
xtable.print
xtable.print
xtable.print
print.xtable
dQuote
?dQuote
newenvironment
?plotmath
plotmath
environment
begin
`\\` <- function(x) str_c("\\", x, "{}")
`\\`("hello")
`\begin`
`\begin` <- "foo"
`\begin`("hello")
`\begin` <- function(x) "foo"
`\begin`("foo")
`\`("hello")
`\` <- function(x) x
`\\` <- function(x) x
`\`(x)
`\\`(x)
`\\`(1)
?str_replace
str_replace_all(str_c(fruits, collapse = "---"),
c("one" = 1, "two" = 2, "three" = 3))
str_replace_all(str_c(fruits, collapse = "---"),
c("one" = 1, "two" = 2, "three" = 3))
fruits <- c("one apple", "two pears", "three bananas")
str_replace_all(str_c(fruits, collapse = "---"),
c("one" = 1, "two" = 2, "three" = 3))
escape_latex <- function(x) {
str_replace_all(x, ESCAPES, )
}
escape_latex("\\ & { } # % & ^ _ ~")
ESCAPES <- list(
'{' = '\\{',
'}' = '\\}',
'\\' = '\\textbackslash{}',
'#' = '\\#',
'\\$' = '\\$',
'%' = '\\%',
'&' = '\\\\&',
'\\^' = '\\textasciicircum{}',
'_' = '\\_',
'~' = '\\textasciitilde{}'
)
escape_latex <- function(x) {
str_replace_all(x, ESCAPES, )
}
ESCAPES <- list(
'{' = '\\{',
'}' = '\\}',
'\\' = '\\textbackslash{}',
'#' = '\\#',
'\\$' = '\\$',
'%' = '\\%',
'&' = '\\\\&',
'\\^' = '\\textasciicircum{}',
'_' = '\\_',
'~' = '\\textasciitilde{}'
)
escape_latex <- function(x) {
str_replace_all(x, ESCAPES, )
}
escape_latex("\\ & { } # % & ^ _ ~")
ESCAPES <- list(
'{' = '\\{'
# '}' = '\\}',
# '\\' = '\\textbackslash{}',
# '#' = '\\#',
# '\\$' = '\\$',
# '%' = '\\%',
# '&' = '\\\\&',
# '\\^' = '\\textasciicircum{}',
# '_' = '\\_',
# '~' = '\\textasciitilde{}'
)
escape_latex <- function(x) {
str_replace_all(x, ESCAPES, )
}
ESCAPES <- c(
'{' = '\\{'
# '}' = '\\}',
# '\\' = '\\textbackslash{}',
# '#' = '\\#',
# '\\$' = '\\$',
# '%' = '\\%',
# '&' = '\\\\&',
# '\\^' = '\\textasciicircum{}',
# '_' = '\\_',
# '~' = '\\textasciitilde{}'
)
escape_latex <- function(x) {
str_replace_all(x, ESCAPES, )
}
escape_latex("\\ & { } # % & ^ _ ~")
0
escape_latex <- function(x) {
str_replace_all(x, ESCAPES)
}
escape_latex("\\ & { } # % & ^ _ ~")
foo <- "\\ & { } # % & ^ _ ~"
str_replace_all(foo, c("{"="\\{"))
str_replace_all(foo, c("\\{"="\\{"))
str_replace_all(foo, c("\\{"="\\{"))
str_replace_all(foo, c("\\{"="\\\\{"))
str_replace_all(foo, c("\\}"="\\\\}"))
str_replace_all(foo, c("\\"="\\textbackslash\\{\\}"))
str_replace_all(foo, c("\\"="\\\\textbackslash\\{\\}"))
str_replace_all(foo, c("\\\\"="\\\\textbackslash\\{\\}"))
str_replace_all(foo, c("#"="\\#"))
str_replace_all(foo, c("#"="\\\\#"))
str_replace_all("$", c("\\\\$"="\\\\$"))
str_replace_all("$", c("\\\\$"="\\\\\\$"))
str_replace_all("$", c("\\$"="\\\\$"))
str_replace_all("$", c("%"="\\\\%"))
str_replace_all(foo, c("%"="\\\\%"))
str_replace_all(foo, c("&"="\\\\&"))
str_replace_all(foo, c("\\^"="\\\\^"))
str_replace_all(foo, c('\\^' = '\\\\textasciicircum\\{\\}'))
ESCAPES <- c(
'\\{' = '\\\\{'
'\\}' = '\\\\}',
'\\\\' = '\\\\textbackslash\\{\\}',
'#' = '\\\\#',
'\\$' = '\\\\$',
'%' = '\\%',
'&' = '\\\\&',
'\\^' = '\\\\textasciicircum\\{\\}',
'_' = '\\\\_',
'~' = '\\\\textasciitilde\\{\\}'
)
escape_latex <- function(x) {
str_replace_all(x, ESCAPES)
}
ESCAPES <- c(
'\\{' = '\\\\{',
'\\}' = '\\\\}',
'\\\\' = '\\\\textbackslash\\{\\}',
'#' = '\\\\#',
'\\$' = '\\\\$',
'%' = '\\%',
'&' = '\\\\&',
'\\^' = '\\\\textasciicircum\\{\\}',
'_' = '\\\\_',
'~' = '\\\\textasciitilde\\{\\}'
)
ESCAPES <- c(
'\\{' = '\\\\{'
'\\}' = '\\\\}',
'\\\\' = '\\\\textbackslash\\{\\}',
'#' = '\\\\#',
'\\$' = '\\\\$',
'%' = '\\%',
'&' = '\\\\&',
'\\^' = '\\\\textasciicircum\\{\\}',
'_' = '\\\\_',
'~' = '\\\\textasciitilde\\{\\}'
)
escape_latex <- function(x) {
str_replace_all(x, ESCAPES)
}
ESCAPES <- c(
'\\{' = '\\\\{',
'\\}' = '\\\\}',
'\\\\' = '\\\\textbackslash\\{\\}',
'#' = '\\\\#',
'\\$' = '\\\\$',
'%' = '\\%',
'&' = '\\\\&',
'\\^' = '\\\\textasciicircum\\{\\}',
'_' = '\\\\_',
'~' = '\\\\textasciitilde\\{\\}'
)
escape_latex <- function(x) {
str_replace_all(x, ESCAPES)
}
escape_latex(foo)
str_replace(foo, "[{}#$^&_\\^]", "\\\\&")
str_replace(foo, "[{}#$^&_\\^]", "\\&")
str_replace(foo, "[{}#$^&_\\^]", "\&")
str_replace(foo, "[{}#$^&_\\^]", "\\&")
str_replace(foo, "([{}#$^&_\\^])", "\\1")
str_replace(foo, "([{}#$^&_\\^])", "\\\\1")
str_replace_all(foo, "([{}#$^&_\\^])", "\\\\1")
str_replace_all(foo, "([{}#$^&_\\^])", "\\1")
str_replace_all(foo, "([{}#$^&_\\^])", "\\\1")
str_replace_all(foo, "([{}#$^&_\\^])", "\\\\1")
str_replace_all(foo, "([{}#$^&_\\^])", "\\\\\\1")
str_replace_all(foo, "([{}#$^&_%])", "\\\\\\1")
cat(str_replace_all(foo, "([{}#$^&_%])", "\\\\\\1"))
cat(str_replace_all(foo, "([{}#$&_%])", "\\\\\\1"))
escape_latex <- function(x) {
spacial_char <- c("[", "{", "}", "#", "$", "&", "_", "%")
str_replace_all(x, str_c("([", str_c(special_char, collapse=""), "])"),
"\\\\\\1")
#str_replace_all(x, ESCAPES)
}
escape_latex <- function(x) {
special_char <- c("[", "{", "}", "#", "$", "&", "_", "%")
str_replace_all(x, str_c("([", str_c(special_char, collapse=""), "])"),
"\\\\\\1")
#str_replace_all(x, ESCAPES)
}
escape_latex(foo)
escape_latex <- function(x) {
special_char <- c("[", "{", "}", "#", "$", "&", "_", "%")
pattern <-  str_c("([", str_c(special_char, collapse = ""), "])")
print(pattern)
str_replace_all(x, pattern, "\\\\\\1")
#str_replace_all(x, ESCAPES)
}
escape_latex(foo)
escape_latex <- function(x) {
special_char <- c("{", "}", "#", "$", "&", "_", "%")
pattern <-  str_c("([", str_c(special_char, collapse = ""), "])")
print(pattern)
str_replace_all(x, pattern, "\\\\\\1")
#str_replace_all(x, ESCAPES)
}
escape_latex(foo)
cat(escape_latex(foo))
escape_latex <- function(x) {
x <- str_replace_all(x, '\\\\', '\\\\textbackslash\\{\\}')
special_char <- c("{", "}", "#", "$", "&", "_", "%")
pattern <-  str_c("([", str_c(special_char, collapse = ""), "])")
print(pattern)
x <- str_replace_all(x, pattern, "\\\\\\1")
#str_replace_all(x, ESCAPES)
x
}
cat(escape_latex(foo))
escape_latex <- function(x) {
x <- str_replace_all(x, '\\\\', '\\\\textbackslash{}')
special_char <- c("{", "}", "#", "$", "&", "_", "%")
pattern <-  str_c("([", str_c(special_char, collapse = ""), "])")
print(pattern)
x <- str_replace_all(x, pattern, "\\\\\\1")
#str_replace_all(x, ESCAPES)
x
}
cat(escape_latex(foo))
escape_latex <- function(x) {
x <- str_replace_all(x, '\\\\', '\\\\textbackslash{}')
special_char <- c("{", "}", "#", "$", "&", "_", "%")
pattern <-  str_c("([", str_c(special_char, collapse = ""), "])")
print(pattern)
x <- str_replace_all(x, pattern, "\\\\\\1")
#str_replace_all(x, ESCAPES)
x
}
cat(escape_latex(foo))
str_replace("a ab", a(?!=b)", "-")
str_replace("a ab", "a(?!=b)", "-")
escape_latex <- function(x) {
special_char <- c("{", "}", "#", "$", "&", "_", "%")
special_char_pattern <-  str_c("[", str_c(special_char, collapse = ""), ")")
x <- str_replace_all(x, str_c("(", special_char_pattern, ")"), "\\\\\\1")
# backslashes that are not escaping special characters
x <- str_replace_all(x, str_c('\\\\', "(?!", special_char_pattern, ")"),
'\\\\textbackslash{\\}')
#str_replace_all(x, ESCAPES)
x
}
cat(escape_latex(foo))
escape_latex <- function(x) {
special_char <- c("{", "}", "#", "$", "&", "_", "%")
special_char_pattern <-  str_c("[", str_c(special_char, collapse = ""), "]")
print(special_char_pattern)
x <- str_replace_all(x, str_c("(", special_char_pattern, ")"), "\\\\\\1")
# backslashes that are not escaping special characters
x <- str_replace_all(x, str_c('\\\\', "(?!", special_char_pattern, ")"),
'\\\\textbackslash{\\}')
#str_replace_all(x, ESCAPES)
x
}
cat(escape_latex(foo))
?stringr::fixed
escape_latex <- function(x) {
special_char <- c("{", "}", "#", "$", "&", "_", "%")
special_char_pattern <-  str_c("[", str_c(special_char, collapse = ""), "]")
print(special_char_pattern)
x <- str_replace_all(x, str_c("(", special_char_pattern, ")"), "\\\\\\1")
# backslashes that are not escaping special characters
x <- str_replace_all(x, str_c('\\\\', "(?!", special_char_pattern, ")"),
'\\\\textbackslash{\\}')
x <- str_replace_all(x, fixed("~"), "\\\\textasciitilde{}")
x
}
?stringr::fixed
cat(escape_latex(foo))
escape_latex <- function(x) {
special_char <- c("{", "}", "#", "$", "&", "_", "%")
special_char_pattern <-  str_c("[", str_c(special_char, collapse = ""), "]")
print(special_char_pattern)
x <- str_replace_all(x, str_c("(", special_char_pattern, ")"), "\\\\\\1")
# backslashes that are not escaping special characters
x <- str_replace_all(x, str_c('\\\\', "(?!", special_char_pattern, ")"),
'\\\\textbackslash{\\}')
x <- str_replace_all(x, fixed("~"), "\\textasciitilde{}")
x
}
cat(escape_latex(foo))
escape_latex <- function(x) {
special_char <- c("{", "}", "#", "$", "&", "_", "%")
special_char_pattern <-  str_c("[", str_c(special_char, collapse = ""), "]")
print(special_char_pattern)
x <- str_replace_all(x, str_c("(", special_char_pattern, ")"), "\\\\\\1")
# backslashes that are not escaping special characters
x <- str_replace_all(x, str_c('\\\\', "(?!", special_char_pattern, ")"),
'\\\\textbackslash{\\}')
x <- str_replace_all(x, fixed("~"), "\\textasciitilde{}")
x <- str_replace_all(x, fixed("^"), "\\textasciicircum{}")
x
}
cat(escape_latex(foo))
?rmarkdown
library(rmarkdown)
?rmarkdown
?render
knit
knitr::knit_child
knitr:::knit_expand
inline_exec
knitr:::inline_exec
