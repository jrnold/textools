check()
check()
check()
readLines("/private/var/folders/g7/d2mfjm5n4c39nyb58lxn9p5c0000gn/T/Rtmp82iaR2/textools.Rcheck/00check.log")
readLines("private/var/folders/g7/d2mfjm5n4c39nyb58lxn9p5c0000gn/T/Rtmp82iaR2/textools.Rcheck/00install.out")
readLines("/private/var/folders/g7/d2mfjm5n4c39nyb58lxn9p5c0000gn/T/Rtmp82iaR2/textools.Rcheck/00install.out")
`\\\` <- macro
source('~/textools/R/textools.R')
check()
check()
check()
check()
check()
?as.character
latex <- parseLatex("fa\\c{c}ile")
deparseLatex(latexToUtf8(latex))
library(tools)
latex <- parseLatex("fa\\c{c}ile")
deparseLatex(latexToUtf8(latex))
latex
str(latex)
deparseLatex
?parseLatex
tools::parse_Rd
tools::initialRdMacros
tools:::initialRdMacros
tools:::loadRdMacros
is.count(0)
library(assertthat)
is.count(0)
is.count(1)
is.count(0)
is.number(0)
is.number(1)
is.number(c(1, 2))
str_c(NULL)
match.arg
?match.arg
L
X
X$begin
TeX$begin
install()
install()
check()
check()
check()
render_latex
rmarkdown:::render_latex
rmarkdown::render_latex
pandoc::render_latex
install.packages("pandoc")
knitr::render_latex
check()
expect_equal(pctcomment(c("a", "b")), c("% a\n", "% b\n"))
pctcomment(c("a", "b"))
pctcomment(c("a", "b"), FALSE)
check()
install()
test()
test()
check()
pctcomment(c("a", "b"), 1)
pctcomment(c("a", "b"), 0
)
pctcomment(c("a", "b"), "a")
test()
?expect_error
test()
newlines(c("a", "b")), "a \\\\\nb \\\\\n")
newlines(c("a", "b"))
cat(newlines(c("a", "b")))
test()
test()
test()
ltxcmd("bf", "hello, world!")
.valid_macroname("foo")
install()
.valid_macroname("foo")
install()
.valid_macroname("foo")
str_detect("foo", "^[A-Za-z]+[*]?$")
ltxcmd("bf", "hello, world!")
install()
ltxcmd("bf")
install()
ltxcmd("foo")
foo <- ltxcmd("foo")
str(foo)
ltxcmd("bf", args="hello, world!", "foo")
foo <- ltxcmd("foo")
foo
foo <- ltxcmd("bf", args="hello, world!", "foo")
foo
str(foo)
install()
str(foo)
foo <- ltxcmd("bf", args="hello, world!", "foo")
str(foo)
install()
install()
foo <- ltxcmd("bf", args="hello, world!", "foo")
foo
install()
foo <- ltxcmd("bf", args="hello, world!", "foo")
foo
as.character(foo)
cat(as.character(foo))
str(foo)
str(ltxcmd("foo"))
tesst()
test()
tst()
test()
length(NULL)
macro("foo")
install()
expect_equal(macro("foo"), "\\foo{}")
test()
ltxcmd("foo", "a1", optargs = c("a", "o2"="b"))
test_that("as.character.latex_command works", {
expect_equal(as.character(ltxcmd("foo")), "\\foo{}")
expect_equal(as.character(ltxcmd("foo", "a1", "a2", "a3",
optargs = c("a", b="2"))),
"\\foo[a,b=2]{a1}{a2}{a3}")
})
test()
ltxcmd(1)
test()
test()
check()
check()
check()
check()
dev_mode()
install()
ltxenv("foo", "")
library(textools)
ltxenv("foo", "")
foo <- ltxenv("foo", "")
str(foo)
library(testthat)
test()
test()
test()
test()
ltxenv("a", "b")
foo <- ltxenv("a", "b", optargs= c(TRUE))
install()
ltxenv("foo", "bar")
install()
ltxenv("foo", "bar")
ltxenv("foo", "bar")
install()
ltxenv("foo", "bar")
install()
ltxenv("foo", "bar")
test()
test()
test()
test_that("begin function works", {
expect_equal(as.character(ltxenv("foo", "bar")), begin("foo", "bar"))
})
ltxnewcommand("foo", "bar")
ltxnewcommand("foo", "bar")
install()
ltxnewcommand("foo", "bar")
install()
ltxnewcommand("foo", "bar")
install()
check()
install()
ltxnewcommand("foo", "bar")
install()
ltxnewcommand("foo", "bar")
install()
ltxnewcommand("foo", "bar")
foo <- ltxnewcommand("foo", "bar")
str(foo)
test()
test()
test()
test()
test()
test()
test()
test()
install()
test()
test()
test()
test()
test()
test()
test()
test()
test()
test()
library(tools)
Rd2txt
tools::prepare_Rd
tools:::prepare_Rd
?srcref
dev_mode()
test()
test()
test()
test()
?expect_equivalent
?expect_equivalent
test()
test()
test()
test()
test()
?%||%
?"%||%"
check()
check()
?escape_latex
library(textools)
?escape_latex
document()
?escape_latex
document()
install()
?escape_latex
install()
?escape_latex
?escape_latex
document()
?escape_latex
document()
?escape_latex
document()
?escape_latex
?escape_latex
?escape_latex
document()
?escape_latex
?escape_latex
document()
?escape_latex
install.packages("qdapRegex")
library(qdapRegex)
?R
?tokenize
?R
tokenizers::stopwords()
parse_Rd
knitr::knit
knitr:::process_file
knitr:::split_file
?str_locate
?parse
parse
parse_Rd
source('~/textools/R/Untitled.R')
library("stringr")
regex <- "#[1-9]"
string <- "a #1 b #2 cde#3#45"
str_locate_all(string, regex)
str_sub('abcd', 1, 1)
str_sub('abcd', 3, -1)
str_sub('abcd', 3, 3)
str_sub('abcd', 4, -1L)
str_sub('abcd', 5, -1L)
source('~/textools/R/Untitled.R')
idx
source('~/textools/R/Untitled.R')
source('~/textools/R/Untitled.R')
parsed_str
source('~/textools/R/Untitled.R')
parsed_str
library(purrr)
?keep
?filter
keep()
?keep
?compact
compact
parsed_str %>%
compact()
?map_if
source('~/textools/R/Untitled.R')
parsed_str %>%
compact() %>%
map_if(~ !.x[[1]], ~ "URL") %>%
map(~ .x[[1]], ~ .x[[2]])
parsed_str %>%
compact() %>%
map_if(~ !.x[[2]], ~ "URL") %>%
map(~ .x[[2]], ~ .x[[1]])
parsed_str %>%
compact() %>%
map_if(~ !.x[[2]], ~ "URL")
parsed_str
source('~/textools/R/Untitled.R')
parsed_str
parsed_str %>% compact()
parsed_str %>% compact() %>% map(length)
parsed_str %>%
compact() %>%
map_if(~ !.x[[2]], ~ "URL")
parsed_str %>%
compact() %>%
map_if(~ !.x[[2]], ~ list(FALSE, "URL")) %>%
map(~ 2L)
parsed_str %>%
compact() %>%
map_if(~ !.x[[2]], ~ list(FALSE, "URL")) %>%
map(2L)
parsed_str %>%
compact() %>%
map_if(~ !.x[[2]], ~ list("URL", FALSE)) %>%
map(2L)
parsed_str %>%
compact() %>%
map_if(~ !.x[[2]], ~ list("URL", FALSE)) %>%
map(2L) %>% unlist() %>% as.character()
parsed_str %>%
compact() %>%
map_if(~ !.x[[2]], ~ list("URL", FALSE)) %>%
map(1L) %>% unlist() %>% as.character()
parsed_str %>%
compact() %>%
map_if(2L, ~ list("URL", TRUE)) %>%
map(1L) %>%
unlist()
parsed_str %>%
compact() %>%
map_if(2L, ~ list("URL", TRUE)) %>%
map_chr(1L)
parsed_str %>%
compact() %>%
map_if(2L, ~ list("URL", TRUE)) %>%
map_chr(1L) %>%
str_c()
parsed_str %>%
compact() %>%
map_if(2L, ~ list("URL", TRUE)) %>%
map_chr(1L) %>%
str_c(collapse="")
source('~/textools/R/Untitled.R')
chunk_replacer(string, regex, match=function(x) "foo")
source('~/textools/R/Untitled.R')
chunk_replacer(string, regex, match=function(x) "foo")
chunk_replacer(chunk_parser(string, regex), match=function(x) "foo")
chunk_replacer(regex_chunker(string, regex), match=function(x) "foo")
source('~/textools/R/Untitled.R')
chunk_replacer(regex_chunker(string, regex), match=function(x) "foo")
chunk_replacer(regex_chunker(string, regex), match=function(x) "URL", nonmatch="NON")
chunk_replacer(regex_chunker(string, regex), match=function(x) "URL", nonmatch=function(x) NON)
chunk_replacer(regex_chunker(string, regex), match=function(x) "URL", nonmatch=function(x) NON)
chunk_replacer(regex_chunker(string, regex), match=function(x) "URL", nonmatch=function(x) "")
chunk_replacer(regex_chunker(string, regex), match=function(x) "URL", nonmatch=function(x) "  ")
qdapRegex::ex_url
source('~/textools/R/Untitled.R')
source('~/textools/R/Untitled.R')
source('~/textools/R/Untitled.R')
URL_REGEX
str_match_all("foo")
str_match_all("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
str_match_all()
?str_match_all
?fixed
?pcre_config
stringr::regex
?stringr::regex
URL_REGEX
source('~/textools/R/Untitled.R')
str_match_all("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
source('~/textools/R/Untitled.R')
source('~/textools/R/Untitled.R')
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
source('~/textools/R/Untitled.R')
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
url_escaper <- function(string,
replacement = function(x) str_c("\\url{", x, "}")) {
chunk_replacer(regex_chunker(string, URL_REGEX),
fun_match = replacement)
}
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
source('~/textools/R/Untitled.R')
source('~/textools/R/Untitled.R')
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
?function
?function
help("function")
source('~/textools/R/Untitled.R')
help("function")
source('~/textools/R/Untitled.R')
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
source('~/textools/R/Untitled.R')
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
source('~/textools/R/Untitled.R')
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
?partial
source('~/textools/R/Untitled.R')
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
source('~/textools/R/Untitled.R')
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
source('~/textools/R/Untitled.R')
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
source('~/textools/R/Untitled.R')
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
source('~/textools/R/Untitled.R')
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
library(purrr)
?map_chr
map_chr
source('~/textools/R/Untitled.R')
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
source('~/textools/R/Untitled.R')
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
source('~/textools/R/Untitled.R')
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
?vapply
source('~/textools/R/Untitled.R')
?vapply
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
source('~/textools/R/Untitled.R')
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
source('~/textools/R/Untitled.R')
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
source('~/textools/R/Untitled.R')
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
source('~/textools/R/Untitled.R')
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
source('~/textools/R/Untitled.R')
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
source('~/textools/R/Untitled.R')
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
source('~/textools/R/Untitled.R')
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
source('~/textools/R/Untitled.R')
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //", URL_REGEX)
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //")
source('~/textools/R/Untitled.R')
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //")
source('~/textools/R/Untitled.R')
url_escaper("I am a url: http://google.com, so am I http://google.com/whatever?q=search&v=value&id_=2315123sdfsa Okay! //")
dev_mode()
test()
test()
?"%||%"
check()
check()
readLines("/private/var/folders/g7/d2mfjm5n4c39nyb58lxn9p5c0000gn/T/RtmpA2ccYX/textools.Rcheck/00install.out")
check()
source('~/textools/R/textools.R', echo=TRUE)
check()
check()
check()
check()
install()
escape_latex("...")
install()
escape_latex("...")
escape_latex("....")
escape_latex("..")
escape_latex("asfsa....")
escape_latex("asfsa...")
check()
check()
check()
check()
check()
check()
escape_latex("foo")
check()
escape_latex("foo")
install()
escape_latex("foo")
escape_latex("foo")
check()
escape_latex("foo")
escape_latex_("foo")
macro("url", "foo")
check()
escape_latex("foo")
check()
install()
escape_latex("foo")
escape_latex("foo", url=FALSE)
escape_latex("foo \ #", url=FALSE)
escape_latex("foo \\ #", url=FALSE)
install()
escape_latex("foo \\ #", url=FALSE)
escape_latex("foo \\ #", url=TRUE)
options(error=recover)
escape_latex("foo \\ #", url=TRUE)
install()
escape_latex("foo \\ #", url=FALSE)
escape_latex("foo \\ #", url=T)
install()
escape_latex("foo \\ #", url=T)
idx_locate_all("foo", "a")
str_locate_all("foo", "a")
install()
check()
escape_latex("foo \\ #", url=T)
install()
escape_latex("foo \\ #", url=T)
install()
escape_latex("foo \\ #", url=T)
escape_latex("foo \\ #", url=T)
install()
escape_latex("foo \\ #", url=T)
escape_latex("foo ...", url=T)
escape_latex("foo ...", ellipses=TRUE)
check()
